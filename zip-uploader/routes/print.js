// routes/print.js
import express from "express";
import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import PDFDocument from "pdfkit";
import { logAction } from "../utils/logger.js";

dotenv.config();
const router = express.Router();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const RECEIVED_BUCKET = "Received";
const EXTRACTED_BUCKET = "Extracted_Files";
const COMPLETED_BUCKET = "Completed";

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// âœ… Helper: Format date to PH timezone
function formatDateTimePH(dateStr) {
  try {
    return new Date(dateStr).toLocaleString("en-PH", {
      timeZone: "Asia/Manila",
      dateStyle: "medium",
      timeStyle: "short",
    });
  } catch {
    return dateStr || "N/A";
  }
}

// âœ… Footer
function addFooter(doc) {
  const footerY = doc.page.height - 40;
  doc.fontSize(10).fillColor("gray").text("Generated by System", 50, footerY, {
    align: "left",
  });
  doc
    .fontSize(10)
    .fillColor("gray")
    .text(`Date: ${formatDateTimePH(new Date())}`, 0, footerY, {
      align: "right",
    });
}

// âœ… Signatories
function addSignatories(doc, currentUser) {
  const signY = doc.page.height - 120;
  doc.fontSize(12).fillColor("black").text(`Printed by: ${currentUser}`, 50, signY);
  doc.text("Approved by: ________________________", 400, signY);
}

router.get("/", (req, res) => {
  res.send(`
    <html>
      <head><title>Print Reports</title></head>
      <body>
        <h2>ðŸ–¨ Generate Reports</h2>
        <ul>
          <li><a href="/print/generate?type=received">ðŸ“¥ Received Files</a></li>
          <li><a href="/print/generate?type=extracted">ðŸ“‚ Extracted Files</a></li>
          <li><a href="/print/generate?type=completed">âœ… Completed Files</a></li>
          <li><a href="/print/generate?type=accounts">ðŸ‘¥ User Accounts</a></li>
          <li><a href="/print/generate?type=all">ðŸ“Š All Data Reports</a></li>
        </ul>
      </body>
    </html>
  `);
});

router.get("/generate", async (req, res) => {
  const type = req.query.type || "all";
  const currentUser = req.session.user?.full_name || "Unknown User";

  try {
    const doc = new PDFDocument({ margin: 50, bufferPages: true });
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `inline; filename=${type}_report.pdf`);
    doc.pipe(res);

    // âœ… Cover page
    doc.fontSize(20).fillColor("#004d40").text("System Report", { align: "center" });
    doc.moveDown(2);
    doc
      .fontSize(14)
      .text(`Report Type: ${type.toUpperCase()}`, { align: "center" });
    doc.text(`Generated: ${formatDateTimePH(new Date())}`, { align: "center" });
    doc.addPage();

    // add footer + signatories to every page
    addFooter(doc);
    addSignatories(doc, currentUser);
    doc.on("pageAdded", () => {
      addFooter(doc);
      addSignatories(doc, currentUser);
    });

    // ========== RECEIVED ==========
    if (type === "received" || type === "all") {
      const { data, error } = await supabase.storage
        .from(RECEIVED_BUCKET)
        .list("", { limit: 100, includeMetadata: true });
      if (error) throw error;

      doc.fontSize(14).fillColor("#009688").text("ðŸ“¥ Received Files");
      doc.moveDown(0.5);

      if (data && data.length > 0) {
        data.forEach((f) => {
          const date = f.updated_at ? formatDateTimePH(f.updated_at) : "N/A";
          doc.fontSize(12).fillColor("black").text(`- ${f.name}   (Date: ${date})`);
        });
      } else {
        doc.fontSize(12).fillColor("gray").text("No files found.");
      }
      doc.moveDown();
    }

    // ========== EXTRACTED ==========
    if (type === "extracted" || type === "all") {
      const { data, error } = await supabase.storage
        .from(EXTRACTED_BUCKET)
        .list("", { limit: 100 });
      if (error) throw error;

      doc.fontSize(14).fillColor("#009688").text("ðŸ“‚ Extracted Folders");
      doc.moveDown(0.5);

      if (data && data.length > 0) {
        for (const f of data) {
          let extractedAt = "N/A";
          try {
            const { data: meta } = await supabase.storage
              .from(EXTRACTED_BUCKET)
              .download(`${f.name}/.extracted.json`);
            if (meta) {
              const txt = await meta.text();
              extractedAt = JSON.parse(txt)?.extractedAt || "N/A";
            }
          } catch {}
          doc
            .fontSize(12)
            .fillColor("black")
            .text(`- ${f.name}   (Date Extracted: ${extractedAt})`);
        }
      } else {
        doc.fontSize(12).fillColor("gray").text("No folders found.");
      }
      doc.moveDown();
    }

    // ========== COMPLETED ==========
    if (type === "completed" || type === "all") {
      const { data, error } = await supabase.storage
        .from(COMPLETED_BUCKET)
        .list("", { limit: 100 });
      if (error) throw error;

      doc.fontSize(14).fillColor("#009688").text("âœ… Completed Folders");
      doc.moveDown(0.5);

      if (data && data.length > 0) {
        for (const f of data) {
          let completedAt = "N/A";
          try {
            const { data: meta } = await supabase.storage
              .from(COMPLETED_BUCKET)
              .download(`${f.name}/.completed.json`);
            if (meta) {
              const txt = await meta.text();
              completedAt = JSON.parse(txt)?.completedAt || "N/A";
            }
          } catch {}
          doc
            .fontSize(12)
            .fillColor("black")
            .text(`- ${f.name}   (Date Completed: ${completedAt})`);
        }
      } else {
        doc.fontSize(12).fillColor("gray").text("No folders found.");
      }
      doc.moveDown();
    }

    // ========== ACCOUNTS ==========
    if (type === "accounts" || type === "all") {
      const { data, error } = await supabase
        .from("accounts")
        .select("id, full_name, email, role, created_at");
      if (error) throw error;

      doc.fontSize(14).fillColor("#009688").text("ðŸ‘¥ User Accounts");
      doc.moveDown(0.5);

      if (data && data.length > 0) {
        doc
          .fontSize(12)
          .fillColor("black")
          .text("ID | Name | Email | Role | Created", { underline: true });
        doc.moveDown(0.5);

        data.forEach((u) => {
          doc
            .fontSize(11)
            .fillColor("black")
            .text(
              `${u.id} | ${u.full_name} | ${u.email} | ${u.role} | ${formatDateTimePH(
                u.created_at
              )}`
            );
        });
      } else {
        doc.fontSize(12).fillColor("gray").text("No accounts found.");
      }
      doc.moveDown();
    }

    doc.end();
    await logAction(req, `generate_report: ${type}`);
  } catch (err) {
    console.error("PDF error:", err);
    res.status(500).send("Error generating PDF: " + err.message);
  }
});

export default router;
